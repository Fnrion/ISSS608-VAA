{
  "hash": "369b9e222ba4656ca5df71c7edae490e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on_Exercise 5: Visualising and Analysing Text Data with R: tidytext methods\"\nauthor: \"Zou Jiaxun\"\ndate: \"May 9, 2024\"\ndata-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Click to view code\"\n---\n\n\n## **1 Learning Outcome**\n\nIn this hands-on exercise, we will learn how to visualise and analyse text data using R.\n\nBy the end of this hands-on exercise, we will be able to:\n\n-   understand tidytext framework for processing, analysing and visualising text data,\n\n-   write function for importing multiple files into R,\n\n-   combine multiple files into a single data frame,\n\n-   clean and wrangle text data by using tidyverse approach,\n\n-   visualise words with Word Cloud,\n\n-   compute term frequency–inverse document frequency (TF-IDF) using tidytext method, and\n\n-   visualising texts and terms relationship.\n\n## **2 Getting Started**\n\n### **2.1 Installing and launching R packages**\n\nIn this hands-on exercise, the following R packages for handling, processing, wrangling, analysing and visualising text data will be used:\n\n-   tidytext, tidyverse (mainly readr, purrr, stringr, ggplot2)\n\n-   widyr,\n\n-   wordcloud and ggwordcloud,\n\n-   textplot (required igraph, tidygraph and ggraph, )\n\n-   DT,\n\n-   lubridate and hms.\n\nThe code chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidytext, widyr, wordcloud, DT, ggwordcloud, textplot, lubridate, hms,\ntidyverse, tidygraph, ggraph, igraph)\n```\n:::\n\n\n## **3 Importing Multiple Text Files from Multiple Folders**\n\n### **3.1 Creating a folder list**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews20 <- \"data/20news/\"\n```\n:::\n\n\n### **3.2 Define a function to read all files from a folder into a data frame**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_folder <- function(infolder){\n  tibble(file = dir(infolder,\n                    full.names = TRUE)) %>%\n    mutate(text = map(file, read_lines)) %>%\n    transmute(id = basename(file),\n              text) %>%\n    unnest(text)\n}\n```\n:::\n\n\n## **4 Importing Multiple Text Files from Multiple Folders**\n\n### **4.1 Reading in all the messages from the 20news folder**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_text <- tibble(folder = dir(news20, full.names = TRUE)) %>%\n  mutate(folder_out = map(folder, read_folder)) %>%\n  unnest(cols = c(folder_out)) %>%\n  transmute(newsgroup = basename(folder), id, text)\nwrite_rds(raw_text, \"data/rds/news20.rd\")\n```\n:::\n\n\n::: panel-tabset\n## read_lines()\n\n[`read_lines()`](https://readr.tidyverse.org/reference/read_lines.html) of [**readr**](https://readr.tidyverse.org/) package is used to read up to n_max lines from a file.\n\n## map()\n\n[`map()`](https://purrr.tidyverse.org/reference/map.html) of [**purrr**](https://purrr.tidyverse.org/) package is used to transform their input by applying a function to each element of a list and returning an object of the same length as the input.\n\n## unnest()\n\n[`unnest()`](https://tidyr.tidyverse.org/reference/nest.html) of **dplyr** package is used to flatten a list-column of data frames back out into regular columns.\n\n## mutate()\n\n[`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) of **dplyr** is used to add new variables and preserves existing ones;\n\n## transmute()\n\n[`transmute()`](https://dplyr.tidyverse.org/reference/mutate.html) of **dplyr** is used to add new variables and drops existing ones.\n\n## read_rds()\n\n[`read_rds()`](https://readr.tidyverse.org/reference/read_rds.html) is used to save the extracted and combined data frame as rds file for future use.\n:::\n\n5 Initial EDA\n\nFigure below shows the frequency of messages by newsgroup.\n\nhttps://r4va.netlify.app/chap29_files/figure-html/unnamed-chunk-6-1.png\n\nThe code chunk:",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}